{
    "elements": {
        "selectGasPrice": {
            "high": "Faster",
            "low": "Cheaper"
        }
    },
    "wallet": {
        "app": {
            "buttons": {
                "wallet": "Wallets",
                "send": "Send",
                "deploy": "Deploy",
                "tokens": "Tokens",
                "receive": "Receive",
                "addWallet": "Add Wallet",
                "addAccount": "Add Account",
                "addToken": "Add Token"
            },
            "texts": {
                "note": "Note",
                "balance": "Balance",
                "connectionErrorMist": "Unable to connect. Please start geth using:<br><br><small><code>__node__</code><br><br>Make sure you set your IPC path to the default one, when using a different <code>datadir</code>, e.g.<br><code>geth --datadir ... --ipcpath /Users/&lt;yourUser&gt;/Library/Ethereum/geth.ipc</code><br>or<br><code>geth --datadir ... --ipcpath /Users/&lt;yourUser&gt;/.ethereum/geth.ipc</code>. <br><br>Optional add: <code>--unlock &lt;yourAccount&gt;.</code></small>",
                "connectionErrorBrowser": "Unable to connect. Please start geth with the following options:<br><br><small><code>__node__</code><br><br>Optional add: <code>--unlock &lt;yourAccount&gt;.</code></small>",
                "pendingConfirmationsBadge": "Pending Confirmation!",
                "nodeSyncing": "__blockDiff__ blocks left",
                "blockReceived": "New Block Received",
                "timeSinceBlock": "since last block",
                "peers": "peers",
                "noAccounts": {
                    "title": "You have no accounts yet",
                    "text": "Before using the Wallet you need to create at least one account with a strong password."
                }
            },
            "error": {
                "wrongChain": "You seem on a different chain, please restart the wallet!"
            }
        },
        "modals": {
            "selectAccount": {
                "title": "Select an account"
            },
            "testnetWallet": {
                "walletNeedsDeployment": "You seem to be on a testnet.<br><br>There is no original wallet found, we need to deploy a wallet, which can be used by the wallet stub contracts, from your address: <br><br><small><code>__account__</code></small><br><br><em>Please make sure this address has at least 1 ether!</em>",
                "testnetWalletDeployed": "Original wallet deployed!<br>An original wallet was deployed on the address:<br><br><small><code>__address__</code></small>."
            },
            "addToken": {
                "title": "Add token",
                "titleEdit": "Edit token",
                "contractAddress": "Token contract address",
                "tokenName": "Token name",
                "tokenSymbol": "Token symbol",
                "decimalPlaces": "Decimals Places of smallest unit",
                "preview": "Preview"
            }
        },
        "accounts": {
            "title": "<strong>Wallet</strong> Overview",
            "walletsTitle": "Contract based wallets",
            "accountsTitle": "Accounts",
            "defaultName": "Unnamed",
            "creating": "Creating",
            "importing": "Importing",
            "accountNote": "Accounts can't list incoming transactions, please <a href=\"/account/new\">create a wallet</a> to store ether.",
            "addressCopiedToClipboard": "Copied to clipboard",
            "qrCodeLabel": "Point a compatible mobile app to this code",
            "dailyLimit": "Daily limit",
            "dailyLimitRemaining": "remaining today",
            "requiredSignatures": "Required signatures",
            "owners": "Owners",
            "walletsDescription": "Wallets are contracts that hold and secure ether. They can have multiple accounts as owners and keep a full log of all transactions.",
            "accountsDescription": "Accounts are password protected keys that control contracts.",
            "buttons": {
                "deposit": "Deposit",
                "copyAddress": "Copy address",
                "scanQRCode": "Show QR-Code"
            },
            "modal": {
                "deleteText": "Do you really want to delete the wallet?<br>If you lose the wallet address, you will lose the funds on it!<br><br>Type the name of the wallet to confirm the deletion.",
                "backupWallet": "<h1>Backup your wallet!</h1>Make sure to write down the address so you can import it again, if needed.<br><pre style=\"font-size: 0.75em;\">__address__</pre>"
            }
        },
        "transactions": {
            "transactionInfoTitle": "Transaction",
            "latest": "Latest transactions",
            "pendingConfirmations": "Confirmation needed",
            "none": "No transactions yet",
            "time": "Time",
            "from": "From",
            "to": "To",
            "amount": "Amount",
            "gasPrice": "Gas price",
            "gasUsed": "Gas used",
            "feePaid": "Fee paid",
            "data": "Send data",
            "deployedData": "Deployed data",
            "confirmations": "Confirmations",
            "unconfirmed": "Unconfirmed",
            "showMore": "Show More",
            "filter": "Filter transactions",
            "noneFound": "No matching transaction found.",
            "noOwnerAccount": "Watch only confirmation",
            "buttons": {
                "approve": "Approve",
                "approved": "Approved",
                "revoke": "Revoke",
                "revoked": "Revoked"
            },
            "error": {
                "noDataDeployed": "No data is deployed on the contract address!"    
            },
            "types": {
                "betweenWallets": "Transfer between wallets",
                "sent": "Sent",
                "received": "Received",
                "createdContract": {
                    "title": "Created contract",
                    "at": "Created contract at"
                },
                "creatingContract": "Creating contract",
                "tokenTransfer": "__token__ - Token transfer",
                "pendingConfirmations": "__initiator__ wants to send from __from__"
            },
            "notifications": {
                "incomingTransaction": {
                    "title": "Payment received",
                    "text": "You received __amount__ on __to__ from __from__."
                },
                "outgoingTransaction": {
                    "title": "Payment send",
                    "text": "You send __amount__ from __from__ to __to__."    
                },
                "pendingConfirmation": {
                    "title": "Confirmation needed",
                    "text": "__initiator__ wants to send __amount__ from __from__ to __to__"
                },
                "tokenTransfer": {
                    "title": "__token__ - Token transfer",
                    "text": "__amount__ __token__  were send from __from__ to __to__."
                }
            }
        },
        "newWallet": {
            "title": "New <strong>Wallet</strong>",
            "accountName": "Wallet name",
            "selectOwner": "Select owner",
            "accountType": {
                "title": "Wallet type",
                "simple": {
                    "title": "Simple Wallet",
                    "description": "A simple wallet without additional security measures.",
                    "warning": "Note: If your owner account is compromised your wallet has no protection."
                },
                "multisig": {
                    "title": "Multisignature Wallet",
                    "description": "A wallet controlled by multiple accounts",
                    "text1": "This is a joint wallet controlled by",
                    "text2": "owners. You can send up to",
                    "text3": "ether per day.",
                    "text4": "Any transaction over that daily limit requires the confirmation of",
                    "text5": "owners.",
                    "accountOwnersTitle": "Wallet owners",
                    "ownerAddress": "Owner address"
                },
                "import": {
                    "title": "Import wallet",
                    "description": "Import an existing (multisignature) wallet.",
                    "walletAddress": "Wallet address",
                    "youreOwner": "Your \"__account__\" account is an owner of the wallet.",
                    "watchOnly": "You don't own the wallet, but you can add it as a \"WATCH ONLY\" wallet.",
                    "notWallet": "This address has no wallet contract."
                }
            },
            "error": {
                "emptySignees": "You didn't provided all owners.",
                "alreadyExists": "Wallet already exists.",
                "stubHasNoOrigWalletAddress": "Your stub contract has no original wallet address set, please restart your wallet!"
            }
        },
        "send": {
            "title": "<strong>Send</strong> funds",
            "sendInfoTitle": "Send",
            "pickAddress": "Pick an address",
            "to": "To",
            "from": "From",
            "amount": "Amount",
            "tokenAmount": "Token amount",
            "sendFunds": "Send funds",
            "deployContract": "Deploy contract",
            "data": "Data",
            "fee": "Select Fee",
            "feeLow": "Cheaper",
            "feeHigh": "Faster",
            "addData": "Add data",
            "removeData": "Remove data",
            "estimatedFee": "Estimated fee",
            "createContract": "Create contract",
            "provideGas": "Provide gas",
            "error": {
                "emptyWallet": "The wallet you want to send from is empty.",
                "notEnoughFunds": "You don't have enough funds in the wallet.",
                "noReceiver": "You didn't specify a receiver.",
                "noAmount": "You didn't specify an amount to send."
            },
            "texts": {
                "sendAmount": "You want to send <strong>__amount__</strong>.",
                "sendAmountEquivalent": "You want to send <strong>__amount__</strong> in ether, using the <a href=\"https://kraken.com\" target=\"_blank\">kraken.com</a> exchange rate.<br>Which is currently an equivalent of <strong>__etherAmount__</strong>.",
                "sendToken": "You want to send <strong>__amount__ __name__</strong>.",
                "overDailyLimit": "<p class=\"over-daily\">This amount is over the remaining daily limit of __limit__ (of __total__ per day), so you need __count__ other account to confirm.</p>",
                "overDailyLimit_plural": "<p class=\"over-daily\">This amount is over the remaining daily limit of __limit__ (of __total__ per day), so you need __count__ other accounts to confirm.</p>",
                "underDailyLimit": "<p class=\"under-daily\">This amount is under the remaining daily limit of __limit__ (of __total__ per day), means it will send immediately.</p>",
                "sendFee": "This is the most amount of money that might be used to process this transaction. Your transaction will be mined <strong>__timetext__</strong>.",
                "noCodeInRecipient": "The recipient account is not a contract, so you can't execute anything. <strong> Put a contract address on the 'TO' field. </strong>",
                "addData": "You can add extra data to send along with your transaction. If you leave the \"to\" field empty it will try to deploy a contract from your data.",
                "dataNotExecutable": "The data seems not to be executabe, that means this transaction will use all the gas you provide.",
                "cantEstimateGas": "We can't estimate your gas usage properly, as you need at least 1 ether in your account.",
                "estimatedGas": "Estimated required gas",
                "timeTexts": {
                    "0": "in a few minutes or more",
                    "1": "likely within a few minutes",
                    "2": "usually within a minute",
                    "3": "probably within 30 seconds",
                    "4": "probably within a few seconds",
                    "5": "probably within a few seconds"
                }
            }
        },
        "tokens": {
            "title": "Custom <strong>Tokens</strong>",
            "subTitle": "Added tokens",
            "description": "Tokens are currencies built on the Ethereum platform. Tokens should follow the <a href=\"https://github.com/ethereum/wiki/wiki/Standardized_Contract_APIs#token\" target=\"_blank\">custom token standard</a>.<br>Create your own token by simply modifiying <a href=\"http://chriseth.github.io/browser-solidity/?gist=20c8b5658349b003b08d\" target=\"_blank\">this example of a custom token contract</a>.",
            "deleteToken": "Do you want to remove the token <strong>__token__</strong> from your list?",
            "addedToken": "Added __token__ to your list",
            "invalidAddress": "Token not added, invalid address.",
            "editedToken": "Edited token __token__"
        },
        "contracts": {
            "deployContract": "<strong>Deploy</strong> contract",
            "contractSourceCode": "Solidity contract source code",
            "contractByteCode": "Contract byte code",
            "selectContract": "Select contract to deploy",
            "constructorParameters": "Constructor parameters",
            "error": {
                "compile": "Could not compile source code.",
                "noDataProvided": "You didn't provide any data"
            }
        }

    }
}