{
    "elements": {
        "selectGasPrice": {
            "high": "Más rápido",
            "low": "Más barato"
        },
        "checksumAlert":"Esta dirección luce válida, pero no tiene algunos mecanismos de seguridad que lo protegerán de errores de tipeo, así que verifique que sea correcta. Si se encuentra, verifique que el ícono de seguridad sea el mismo.",
        "identiconHelper": "Este es un ícono de seguridad, si la dirección cambia en lo más mínimo, el ícono será completamente distinto"
    },
    "wallet": {
        "app": {
            "buttons": {
                "wallet": "Billeteras",
                "send": "Enviar",
                "contracts": "Contratos",
                "deploy": "Desplegar",
                "tokens": "Fichas",
                "receive": "Recibir",
                "addWallet": "Añadir contrato billetera",
                "addAccount": "Añadir Cuenta",
                "addToken": "Observar Ficha"
            },
            "texts": {
                "note": "Nota",
                "balance": "Saldo",
                "connectionErrorMist": "No se pudo conectar. Por favor, inicie geth con:<br><br><small><code>__node__</code><br><br>Asegúrese de establecer la ruta de IPC a la por defecto, cuando usa un <code>datadir</code> distinto, por ej.<br><code>geth --datadir ... --ipcpath /Users/&lt;suUsuario&gt;/Library/Ethereum/geth.ipc</code><br>o<br><code>geth --datadir ... --ipcpath /Users/&lt;suUsuario&gt;/.ethereum/geth.ipc</code>. <br><br>Opcionalmente: <code>--unlock &lt;suCuenta&gt;.</code></small>",
                "connectionErrorBrowser": "No se pudo conectar. Por favor inicie geth con las siguientes opciones:<br><br><small><code>__node__</code><br><br>Opcionalmente agregue: <code>--unlock &lt;suCuenta&gt;.</code></small>",
                "pendingConfirmationsBadge": "Confirmación Pendiente!",
                "nodeSyncing": "__blockDiff__ blocks left",
                "blockReceived": "New Block Received",
                "timeSinceBlock": "since last block",
                "peers": "peers",
                "testnetExplain": "You are on a testnet, DO NOT SEND any real ether to these addresses",
                "noAccounts": {
                    "title": "You have no accounts yet",
                    "text": "You need to create at least one account with a strong password."
                }
            },
            "error": {
                "wrongChain": "You seem on a different chain, please restart the Ethereum Wallet App!"
            },
            "warnings": {
                "txOriginVulnerabilityWallet": "Esta cartera tiene contrato inteligente código obsoleto y está sujeto a ataques de phishing. ",
                "txOriginVulnerabilityCallToAction":"Actualizar su contrato ahora y transferir todos sus fondos a su nueva.",
                "txOriginVulnerabilityAccount": "Esta cuenta es un propietario de un contrato cartera vulnerables y el uso de esta cuenta en los contratos maliciosos pueden poner en peligro sus fondos carteras. Actualizar su cartera antes de realizar cualquier transacción con esta cuenta.",
                "txOriginVulnerabilityPopup": "Encontramos carteras vulnerables! Asegúrese de implementar las nuevas carteras y mover los fondos!",
                "learnMore": "Más información acerca de esta vulnerabilidad"
            }
        },
        "modals": {
            "selectAccount": {
                "title": "Select an account"
            },
            "testnetWallet": {
                "walletNeedsDeployment": "You seem to be on a testnet.<br><br>There is no original wallet contract code found, we need to deploy one, which can be used by the wallet contract stub contracts, from your address: <br><br><small><code>__account__</code></small><br><br><em>Please make sure this address has at least 1 ether!</em>",
                "testnetWalletDeployed": "Original wallet contract deployed!<br>An original wallet contract was deployed on the address:<br><br><small><code>__address__</code></small>."
            },
            "addToken": {
                "title": "Add token",
                "titleEdit": "Edit token",
                "contractAddress": "Token contract address",
                "tokenName": "Token name",
                "tokenSymbol": "Token symbol",
                "decimalPlaces": "Decimals Places of smallest unit",
                "preview": "Preview"
            },
            "interface": {
                "title": "Contract JSON Interface",
                "description": "If you want to have someone else execute this contract, send this information along with the contract's address."
            }
        },
        "accounts": {
            "title": "<strong>Accounts</strong> Overview",
            "walletsTitle": "Wallet contracts",
            "accountsTitle": "Accounts",
            "defaultName": "Unnamed",
            "creating": "Creating",
            "importing": "Importing",
            "accountNote": "Accounts can't display incoming transactions, but hold and send ether. To see incoming transactions <a href=\"/account/new\">create a wallet contract</a> to store ether.",
            "walletNote": "Most exchanges don't support receiving ether from a contract wallet yet. Be sure to move the money to an account address first!",
            "addressCopiedToClipboard": "Copied to clipboard",
            "qrCodeLabel": "Point a compatible mobile app to this code",
            "dailyLimit": "Daily limit",
            "dailyLimitRemaining": "remaining today",
            "requiredSignatures": "Required signatures",
            "owners": "Owners",
            "walletsDescription": "These are contracts that are stored on the blockchain and can hold and secure ether. They can have multiple accounts as owners and keep a full log of all transactions.",
            "walletsDescriptionNotEnoughFunds": "Once you have more than 1 ether you can create a more sophisticated contracts. Wallets are one type of basic smart contract, that allows your funds to be controlled by multiple accounts and have an optional daily limit on withdrawals, to increase security.  To create your own custom contracts go to the <em> Contracts </em> tab.",
            "accountsDescription": "Accounts are password protected keys that can hold ether, secure ethereum-based tokens or coins and control contracts. Accounts can't display incoming transactions.",
            "buttons": {
                "deposit": "Deposit Ether",
                "depositBitcoin": "Deposit using Bitcoin",
                "copyAddress": "Copy address",
                "scanQRCode": "Show QR-Code",
                "showInterface": "Show Interface"
            },
            "modal": {
                "deleteText": "Do you really want to delete this wallet contract? The account will still exist on the blockchain but <br>if you delete the address, you will not be able to find and will lose access to the funds deposited<br><br> Type \"delete\" confirm the deletion.",
                "backupWallet": {
                    "title": "Backup your wallet contract address!",
                    "description": "Make sure to write down the wallet contract address:"
                }
            }
        },
        "events": {
            "eventInfoTitle": "Event",
            "latest": "Latest events",
            "filter": "Filter events",
            "transactionHash": "Transaction hash",
            "block": "Block",
            "originContract": "Origin contract",
            "logIndex": "Log index",
            "transactionIndex": "Transaction index",
            "returnValues": "Return values",
            "eventName": "Event name"
        },
        "transactions": {
            "transactionInfoTitle": "Transaction",
            "latest": "Latest transactions",
            "block": "Block",
            "pendingConfirmations": "Confirmation needed",
            "none": "No transactions yet",
            "time": "Time",
            "from": "From",
            "to": "To",
            "amount": "Amount",
            "gasPrice": "Gas price",
            "perMillionGas": " PER MILLION GAS",
            "gasUsed": "Gas used", 
            "feePaid": "Fee paid",
            "data": "Send data",
            "deployedData": "Deployed data",
            "confirmations": "Confirmations",
            "unconfirmed": "Unconfirmed",
            "showMore": "Show More",
            "filter": "Filter transactions",
            "noneFound": "No matching transaction found.",
            "noOwnerAccount": "Watch only confirmation",
            "outOfGasDesc": "The transaction didn't seem to have enough gas to execute.",
            "buttons": {
                "approve": "Approve",
                "approved": "Approved",
                "revoke": "Revoke",
                "revoked": "Revoked"
            },
            "error": {
                "noDataDeployed": "No data is deployed on the contract address!",
                "outOfGas": "The transaction from __from__ to __to__ couldn't be successfully executed."  
            },
            "types": {
                "executeContract": "Contract Execution",
                "betweenWallets": "Transfer between accounts",
                "sent": "Sent",
                "received": "Received",
                "outOfGas": "Transaction not executed",
                "createdContract": {
                    "title": "Created contract",
                    "at": "Created contract at"
                },
                "creatingContract": "Creating contract",
                "tokenTransfer": "__token__ - Token transfer",
                "pendingConfirmations": "__initiator__ wants to send from __from__"
            },
            "notifications": {
                "incomingTransaction": {
                    "title": "Payment received",
                    "text": "You received __amount__ on __to__ from __from__."
                },
                "outgoingTransaction": {
                    "title": "Payment sent",
                    "text": "You sent __amount__ from __from__ to __to__."    
                },
                "pendingConfirmation": {
                    "title": "Confirmation needed",
                    "text": "__initiator__ wants to send __amount__ from __from__ to __to__"
                },
                "tokenTransfer": {
                    "title": "__token__ - Token transfer",
                    "text": "__amount__ __token__  were send from __from__ to __to__."
                }
            }
        },
        "newWallet": {
            "title": "New <strong>wallet contract</strong>",
            "accountName": "Wallet contract name",
            "selectOwner": "Select owner",
            "accountType": {
                "title": "Wallet contract type",
                "simple": {
                    "title": "Single owner account",
                    "description": "A simple contract without additional security measures.",
                    "warning": "Note: If your owner account is compromised your wallet has no protection."
                },
                "multisig": {
                    "title": "Multisignature wallet contract",
                    "description": "A contract controlled by multiple accounts",
                    "text1": "This is a joint account controlled by",
                    "text2": "owners. You can send up to",
                    "text3": "ether per day.",
                    "text4": "Any transaction over that daily limit requires the confirmation of",
                    "text5": "owners.",
                    "accountOwnersTitle": "Account owners",
                    "ownerAddress": "Owner address"
                },
                "import": {
                    "title": "Import wallet",
                    "description": "Import an existing (multisignature) wallet.",
                    "walletAddress": "Wallet address",
                    "youreOwner": "Your \"__account__\" account is an owner of this wallet contract.",
                    "watchOnly": "You don't own the account, but you can add it as a \"WATCH ONLY\" account.",
                    "notWallet": "This address has no wallet contract."
                }
            },
            "error": {
                "emptySignees": "You didn't provided all owners.",
                "alreadyExists": "Account already exists.",
                "stubHasNoOrigWalletAddress": "Your stub contract has no original account address set, please restart your App!",
                "contractsCantBeOwners": "Contracts can't be owners.",
                "checkOwnerAddress": "Please change the contract address __address__ to an account."
            }
        },
        "send": {
            "title": "<strong>Send</strong> funds",
            "sendInfoTitle": "Send",
            "pickAddress": "Pick an address",
            "to": "To",
            "from": "From",
            "amount": "Amount",
            "tokenAmount": "Token amount",
            "sendFunds": "Send funds",
            "deployContract": "Deploy contract",
            "data": "Data",
            "fee": "Select Fee",
            "feeLow": "Cheaper",
            "feeHigh": "Faster",
            "addData": "Add data",
            "sendAll": "Send everything",
            "removeData": "Remove data",
            "estimatedFee": "Estimated fee",
            "createContract": "Create contract",
            "provideGas": "Provide gas",
            "transactionSent": "Transaction sent",
            "error": {
                "emptyWallet": "The account you want to send from is empty.",
                "notEnoughFunds": "You don't have enough funds in the account.",
                "noReceiver": "You didn't specify a receiver.",
                "noAmount": "You didn't specify an amount to send."
            },
            "texts": {
                "ownerPaysGas": "Gas is paid by the owner of the wallet contract",
                "sendAmount": "You want to send <strong>__amount__</strong>.",
                "sendAmountEquivalent": "You want to send <strong>__amount__</strong> in ether, using exchange rates from <a href=\"https://www.cryptocompare.com/coins/eth/overview/BTC\" target=\"_blank\">cryptocompare.com</a>.<br>Which is currently an equivalent of <strong>__etherAmount__</strong>.",
                "sendToken": "You want to send <strong>__amount__ __symbol__</strong> of <strong> __name__</strong>.",
                "overDailyLimit": "<p class=\"over-daily\">This amount is over the remaining daily limit of __limit__ (of __total__ per day), so you need __count__ other account to confirm.</p>",
                "overDailyLimit_plural": "<p class=\"over-daily\">This amount is over the remaining daily limit of __limit__ (of __total__ per day), so you need __count__ other accounts to confirm.</p>",
                "underDailyLimit": "<p class=\"under-daily\">This amount is under the remaining daily limit of __limit__ (of __total__ per day), means it will send immediately.</p>",
                "sendFee": "This is the most amount of money that might be used to process this transaction. Your transaction will be mined <strong>__timetext__</strong>.",
                "noCodeInRecipient": "The recipient account is not a contract, so you can't execute anything. <strong> Put a contract address on the 'TO' field. </strong>",
                "addData": "You can add extra data to send along with your transaction. If you leave the \"to\" field empty it will try to deploy a contract from your data.",
                "dataNotExecutable": "The data seems not to be executabe, that means this transaction will use all the gas you provide.",
                "cantEstimateGas": "We can't estimate your gas usage properly, as you need at least 1 ether in your account.",
                "estimatedGas": "Estimated required gas",
                "timeTexts": {
                    "0": "in a few minutes or more",
                    "1": "likely within a few minutes",
                    "2": "usually within a minute",
                    "3": "probably within 30 seconds",
                    "4": "probably within a few seconds",
                    "5": "probably within a few seconds"
                }
            }
        },
        "tokens": {
            "title": "Custom <strong>Tokens</strong>",
            "subTitle": "Added tokens",
            "admin": "__name__ (admin page)",
            "description": "Tokens are currencies and other fungibles built on the Ethereum platform. In order for accounts to watch for tokens and send them, you have to add their address to this list. You can create your own token by simply modifiying <a href=\"http://chriseth.github.io/browser-solidity/?gist=0d1a998d949e26942212\" target=\"_blank\">this example of a custom token contract</a> or learning more about <a href=\"https://www.ethereum.org/token#the-code\" target=\"_blank\">Ethereum Tokens</a>.",
            "deleteToken": "Do you want to remove the token <strong>__token__</strong> from your list?",
            "addedToken": "Added __token__ to your watch list",
            "editedToken": "Edited token __token__",
            "error": {
                "invalidAddress": "Token not added, invalid address."
            }
        },
        "contracts": {
            "contractTitle" : "Contracts",
            "deployNewContract": "Deploy new contract",
            "addCustomContract": "Watch contract",
            "customContracts": "Custom contracts",
            "description": "In order to watch and interact with a contract already deployed on the blockchain you need to know its address and description of its interface in JSON format.",
            "deployContract": "<strong>Deploy</strong> contract",
            "contractSourceCode": "Solidity contract source code",
            "contractByteCode": "Contract byte code",
            "selectContract": "Select contract to deploy",
            "constructorParameters": "Constructor parameters",
            "name": "Contract Name",
            "address": "Contract Address",
            "jsonInterface": "JSON Interface",
            "contractInformation": "Contract Information",
            "addedContract": "Added custom contract",
            "readFromContract": "Read from contract",
            "writeToContract": "Write to contract",
            "pickContract": "Pick a contract",
            "pickFunction": "Pick a function",
            "noContract": "<p>Put the source of the contract you want here. You can find many examples of contracts at the <a href=\"http://ethereum.org\" target=\"_blank\">ethereum.org</a>: </p> <ul><li><a href=\"http://ethereum.org/token#the-code\" target=\"_blank\">Build a token</a></li><li><a href=\"http://ethereum.org/crowdsale#the-code\" target=\"_blank\">Start a crowdsale</a></li><li><a href=\"http://ethereum.org/dao#the-code\" target=\"_blank\">Create a blockchain organization</a></li></ul>",
            "buttons": {
                "showContractInfo": "Show contract info",
                "hideContractInfo": "Hide contract info",
                "watchContractEvents": "Ver eventos de contrato",
                "execute": "Execute",
                "yes": "Yes"
            },
            "error": {
                "compile": "Could not compile source code.",
                "noDataProvided": "No Data found: select a contract from the 'select contract' menu",
                "invalidAddress": "Contract not added, invalid address.",
                "jsonInterfaceParseError": "Couldn't parse the JSON Interface."
            }
        }
    }
}